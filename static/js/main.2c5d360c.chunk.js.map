{"version":3,"sources":["Component/Navbar.js","Component/Card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Card","user","src","picture","large","alt","name","title","first","last","email","App","useState","users","setUsers","useEffect","a","axios","get","res","data","results","fetchData","console","log","map","key","id","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAgBeA,G,YAdA,WACd,OACC,gCACC,6BACC,yBAAKC,UAAU,eACd,uBAAGC,KAAK,IAAID,UAAU,cAAtB,mBCeUE,G,MApBF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACC,yBAAKH,UAAU,wBACd,yBAAKA,UAAU,mBACd,yBAAKA,UAAU,cACd,yBAAKI,IAAKD,EAAKE,QAAQC,MAAON,UAAU,MAAMO,IAAI,QAEnD,yBAAKP,UAAU,gBACd,yBAAKA,UAAU,gBACd,sCACKG,EAAKK,KAAKC,MADf,aACyBN,EAAKK,KAAKE,MADnC,YAC4CP,EAAKK,KAAKG,OAEtD,sCAAYR,EAAKS,a,iBCeRC,MAvBf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,KAad,OAVAC,qBAAU,YACM,uCAAG,4BAAAC,EAAA,sEACCC,IAAMC,IACvB,yCAFgB,OACXC,EADW,OAIjBL,EAASK,EAAIC,KAAKC,SAJD,2CAAH,qDAMfC,KACE,IACHC,QAAQC,IAAIX,GAEX,6BACC,kBAAC,EAAD,MACCA,EAAMY,KAAI,SAACxB,GAAD,OACV,kBAAC,EAAD,CAAMyB,IAAG,OAAEzB,QAAF,IAAEA,OAAF,EAAEA,EAAM0B,GAAGC,MAAO3B,KAAMA,SCXjB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.2c5d360c.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\nconst Navbar = () => {\n\treturn (\n\t\t<header>\n\t\t\t<nav>\n\t\t\t\t<div className=\"nav-wrapper\">\n\t\t\t\t\t<a href=\"/\" className=\"brand-logo\">\n\t\t\t\t\t\tFriendList\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t</header>\n\t);\n};\n\nexport default Navbar;\n","import React from 'react';\nimport './Card.css';\nconst Card = ({ user }) => {\n\treturn (\n\t\t<div className=\"col s12 m7 container\">\n\t\t\t<div className=\"card horizontal\">\n\t\t\t\t<div className=\"card-image\">\n\t\t\t\t\t<img src={user.picture.large} className=\"img\" alt=\"ab\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-stacked\">\n\t\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t\t<h4>\n\t\t\t\t\t\t\t{`${user.name.title}. ${user.name.first} ${user.name.last}`}\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t<h5>Email: {user.email}</h5>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Navbar from './Component/Navbar';\nimport Card from './Component/Card';\nimport axios from 'axios';\n\nfunction App() {\n\tconst [users, setUsers] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tconst res = await axios.get(\n\t\t\t\t'https://randomuser.me/api/?results=10'\n\t\t\t);\n\t\t\tsetUsers(res.data.results);\n\t\t};\n\t\tfetchData();\n\t}, []);\n\tconsole.log(users);\n\treturn (\n\t\t<div>\n\t\t\t<Navbar />\n\t\t\t{users.map((user) => (\n\t\t\t\t<Card key={user?.id.value} user={user} />\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}